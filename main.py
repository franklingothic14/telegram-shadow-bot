import os
import aiohttp
import asyncio
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

BOT_TOKEN = os.getenv('BOT_TOKEN')
SHADEMAP_API_KEY = os.getenv('SHADEMAP_API_KEY')
SHADEMAP_API_URL = "https://api.shademap.app/v1/shadow-analysis"
REQUEST_TIMEOUT = 15  # –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤–∞–∂–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

async def fetch_shademap_data(lat: float, lon: float) -> dict | None:
    headers = {"Authorization": f"Bearer {SHADEMAP_API_KEY}"}
    params = {
        "lat": lat,
        "lon": lon,
        "interval": 15,
        "hours": 24,
        "timezone": "auto"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                SHADEMAP_API_URL,
                headers=headers,
                params=params,
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
            ) as resp:
                if resp.status == 200:
                    return await resp.json()
                return None
    except Exception as e:
        print(f"API Error: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöó –í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —á–∞—Å –ø—ñ–¥ —Å–æ–Ω—Ü–µ–º.",
        reply_markup=get_main_keyboard()
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action=ChatAction.TYPING
    )
    
    loc = update.message.location
    if not loc:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return

    try:
        # –ü–µ—Ä—à–∏–π –µ—Ç–∞–ø: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=ChatAction.TYPING
        )
        data = await fetch_shademap_data(loc.latitude, loc.longitude)
        
        if not 
            raise ValueError("API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–æ")

        # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        sun_minutes = data.get("total_sun_minutes", 0)
        await update.message.reply_text(
            f"‚òÄÔ∏è **–ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–Ω—Ü—è:**\n"
            f"–ê–≤—Ç–æ –±—É–¥–µ –ø—ñ–¥ —Å–æ–Ω—Ü–µ–º *{sun_minutes} —Ö–≤–∏–ª–∏–Ω* –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 24 –≥–æ–¥.\n"
            f"–¢–æ—á–Ω—ñ—Å—Ç—å: {data.get('accuracy', 'high')}",
            parse_mode="Markdown"
        )
        
    except asyncio.TimeoutError:
        await update.message.reply_text("‚åõ –ó–∞–ø–∏—Ç –∑–∞–π–Ω—è–≤ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        print(f"Error: {e}")
        await update.message.reply_text("‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    
    print("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
    app.run_polling()

if __name__ == "__main__":
    if not BOT_TOKEN or not SHADEMAP_API_KEY:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ BOT_TOKEN —Ç–∞ SHADEMAP_API_KEY")
        exit(1)
    main()
