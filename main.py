import os
import aiohttp
import asyncio
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from timezonefinder import TimezoneFinder
from pytz import timezone
from shapely.geometry import Point
import geopandas as gpd

BOT_TOKEN = os.getenv('BOT_TOKEN')

DATA_URL = "https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson"
BUILDINGS_FILE = "data/buildings.geojson"  # –ª–æ–∫–∞–ª—å–Ω–∏–π –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
TREES_FILE = "data/trees.geojson"          # –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ

RADIUS_BUILDING = 15  # –º
RADIUS_TREE = 10      # –º

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ (–ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ ‚Äî –¥–æ–¥–∞–π –≤ –ø—Ä–æ—î–∫—Ç)
buildings_gdf = gpd.read_file(BUILDINGS_FILE) if os.path.exists(BUILDINGS_FILE) else gpd.GeoDataFrame()
trees_gdf = gpd.read_file(TREES_FILE) if os.path.exists(TREES_FILE) else gpd.GeoDataFrame()


def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


def find_objects_nearby(lat: float, lon: float) -> list:
    point = Point(lon, lat)
    objects = []

    if not buildings_gdf.empty:
        nearby_buildings = buildings_gdf[buildings_gdf.geometry.distance(point) * 111000 < RADIUS_BUILDING]
        objects += [{"type": "building", "geometry": geom} for geom in nearby_buildings.geometry]

    if not trees_gdf.empty:
        nearby_trees = trees_gdf[trees_gdf.geometry.distance(point) * 111000 < RADIUS_TREE]
        objects += [{"type": "tree", "geometry": geom} for geom in nearby_trees.geometry]

    return objects


def estimate_shadow_presence(objects: list) -> bool:
    return any(obj["type"] in ["tree", "building"] for obj in objects)


def summarize_object_types(objects: list) -> str:
    trees = sum(1 for o in objects if o["type"] == "tree")
    buildings = sum(1 for o in objects if o["type"] == "building")
    parts = []
    if buildings:
        parts.append(f"üè¢ –ë—É–¥—ñ–≤–ª—ñ: {buildings}")
    if trees:
        parts.append(f"üå≥ –î–µ—Ä–µ–≤–∞: {trees}")
    return "\n".join(parts) if parts else "–ù–µ–º–∞—î –æ–±'—î–∫—Ç—ñ–≤ –ø–æ—Ä—É—á."


def simulate_sun_angle(hour_decimal: float) -> float:
    return max(0, 90 - abs(hour_decimal - 13) * 7)


def get_shadow_data(objects: list, local_time: datetime) -> tuple[list[str], str]:
    has_shadow_sources = estimate_shadow_presence(objects)
    if not has_shadow_sources:
        return [], "‚òÄÔ∏è" * 24

    intervals = []
    bar = ""
    in_shadow = False
    start_time = None

    for i in range(288):  # 24*60 / 5
        minutes_offset = i * 5
        current_time = local_time + timedelta(minutes=minutes_offset)
        hour_decimal = current_time.hour + current_time.minute / 60
        sun_angle = simulate_sun_angle(hour_decimal)

        shadow = sun_angle < 45

        if i % 12 == 0:
            bar += "üåë" if shadow else "‚òÄÔ∏è"

        if shadow:
            if not in_shadow:
                start_time = current_time
                in_shadow = True
        else:
            if in_shadow:
                end_time = current_time
                intervals.append(f"{start_time.strftime('%H:%M')} ‚Äì {end_time.strftime('%H:%M')}")
                in_shadow = False

    if in_shadow and start_time:
        end_time = local_time + timedelta(minutes=5 * 288)
        intervals.append(f"{start_time.strftime('%H:%M')} ‚Äì {end_time.strftime('%H:%M')}")

    return intervals, bar


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöó –í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ–≥–Ω–æ–∑ —Ç—ñ–Ω—ñ.",
        reply_markup=get_main_keyboard()
    )


async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    loc = update.message.location
    if not loc:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return

    try:
        tf = TimezoneFinder()
        tz_name = tf.timezone_at(lat=loc.latitude, lng=loc.longitude)
        if not tz_name:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å.")
        local_time = datetime.now(timezone(tz_name))

        nearby_objects = find_objects_nearby(loc.latitude, loc.longitude)
        has_shadow = estimate_shadow_presence(nearby_objects)
        result = "‚úÖ –ô–º–æ–≤—ñ—Ä–Ω–æ, –≤ —Ç—ñ–Ω—ñ." if has_shadow else "‚òÄÔ∏è –û–±'—î–∫—Ç, –π–º–æ–≤—ñ—Ä–Ω–æ, –±—É–¥–µ –ø—ñ–¥ —Å–æ–Ω—Ü–µ–º."

        summary = summarize_object_types(nearby_objects)
        shadow_intervals, shadow_graph = get_shadow_data(nearby_objects, local_time)
        shadow_text = (
            "üï∂Ô∏è –ß–∞—Å —É —Ç—ñ–Ω—ñ:\n" + "\n".join(shadow_intervals)
            if shadow_intervals else "‚òÄÔ∏è –ô–º–æ–≤—ñ—Ä–Ω–æ, –≤–µ—Å—å –¥–µ–Ω—å –±—É–¥–µ –±–µ–∑ —Ç—ñ–Ω—ñ."
        )

        await update.message.reply_text(
            f"{result}\n\n"
            f"üïí –õ–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å: {local_time.strftime('%H:%M')}\n"
            f"üìç –û–±‚Äô—î–∫—Ç–∏ –ø–æ—Ä—É—á:\n{summary}\n\n"
            f"{shadow_text}\n\n"
            f"üìä –ì—Ä–∞—Ñ—ñ–∫ —Ç—ñ–Ω—ñ:\n{shadow_graph}"
        )

    except Exception as e:
        print(f"Error: {e}")
        await update.message.reply_text("‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


def main():
    if not BOT_TOKEN:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))

    print("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
    app.run_polling()


if __name__ == "__main__":
    main()