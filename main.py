
from aiogram import Bot, Dispatcher, types
from aiogram.types import Location
from aiogram.utils import executor
from suntime import Sun
from datetime import datetime
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.reply("üëã –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, –¥–µ –∑–∞–ø–∞—Ä–∫—É–≤–∞–≤—Å—è.")

@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Message):
    loc: Location = message.location
    sun = Sun(loc.latitude, loc.longitude)
    now = datetime.utcnow()

    try:
        sr = sun.get_sunrise_time()
        ss = sun.get_sunset_time()

        if now < sr:
            diff = sr - now
            await message.reply(f"–ó–∞—Ä–∞–∑ —Ç–µ–º–Ω–æ üåô. –°–æ–Ω—Ü–µ –∑—ñ–π–¥–µ —á–µ—Ä–µ–∑ {diff.seconds//60} —Ö–≤.")
        elif now > ss:
            await message.reply("–°–æ–Ω—Ü–µ –≤–∂–µ —Å—ñ–ª–æ üåô. –ú—ñ—Å—Ü–µ –≤ —Ç—ñ–Ω—ñ.")
        else:
            await message.reply("–°–æ–Ω—Ü–µ –Ω–∞–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º ‚òÄÔ∏è. –ú–æ–∂–ª–∏–≤–æ, —â–µ –Ω–µ–º–∞—î —Ç—ñ–Ω—ñ.")
    except Exception as e:
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞—Ö.")

if __name__ == '__main__':
    executor.start_polling(dp)
